type Wallet @entity {
    "Unique identifier of the wallet (lowercase Safe{Wallet} address) TODO: check if lowercase is still needed" 
    id                  : Bytes!

    "Address that created the contract"
    creator             : Bytes!

    "Network where the wallet is deployed (plain text: mainnet, sepolia, matic, etc.)"
    network             : String!

    "Timestamp when the wallet was deployed"
    timestamp           : BigInt!

    "Transaction hash when the wallet was deployed"
    hash                : Bytes!

    "Factory address that deployed the wallet"
    factory             : Bytes!

    "Singleton address used by the proxy (formerly known as mastercopy)"
    singleton          : Bytes!

    "Version of the Safe{Wallet} (e.g. 1.1.1, 1.3.0, 1.3.0+L2, etc.)"
    version             : String

    "Nonce used to order and uniquely identified each transaction"
    currentNonce        : BigInt!

    "List of owner addresses of the wallet"
    owners              : [Bytes!]!

    "Number of confirmations required to execute a transaction"
    threshold            : BigInt!

    "List of successful and failed transactions executed from the wallet"
    transactions        : [Transaction!]! @derivedFrom(field: "wallet")
}

type Transaction @entity {
    "Unique identifier of the transaction = keccak256(concat(walletAddress, txHash))"
    id                  : Bytes!

    "Timestamp when the transaction was executed"
    timestamp           : BigInt

    "Block on Ethereum"
    block               : BigInt

    "Status of the transaction"
    status              : TransactionStatus

    "Network transaction hash"
    hash                : Bytes

    "Safe{Wallet} transaction hash"
    txHash              : Bytes

    "Ether Amount (in WEI) included in the transaction - transfered from the wallet when the transaction is executed"
    value               : BigInt

    "Destination of the transaction"
    to                  : Bytes

    "Data of the transaction - smart contract input data bytecode"
    data                : Bytes

    "Signatures"
    signatures          : Bytes

    "Nonce"
    nonce               : BigInt

    "Operation"
    operation           : Operation

    "Estimated Gas that should be used for the underlying Safe transaction"
    estimatedSafeTxGas  : BigInt

    "Estimated Gas costs independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund)"
    estimatedBaseGas    : BigInt

    "gasPrice (in gasToken)"
    gasPrice            : BigInt

    "gasToken"
    gasToken            : Bytes

    "refundReceiver"
    refundReceiver      : Bytes

    "Amount paid as fee to refundReceiver"
    payment             : BigInt

    "Present if the transaction is from a Safe module (in this case some other fields won't be available as not all fields are used in the Safe module context)"
    module              : Bytes

    "Safe{Wallet} parent"
    wallet              : Wallet!
}

enum TransactionStatus {
    "Transaction was executed successfully"
    EXECUTED

    "Transaction failed during the execution"
    FAILED
}

enum Operation {
    CALL
    DELEGATE_CALL
}
